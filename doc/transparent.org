* TCP

  one connection(dst/src) one session

** class tcp_server

  1. create new raw_tcp
  2. accept on local connect
  3. add raw_tcp to ssl_relay and start new session
  4. goto 1

  ssl_relay start new tcp session
  1. new session, associate with raw_tcp
  2. send start tcp to server
  3. raw_tcp start relay

  ssl_relay remote start
  1. new raw_tcp associate with session
  2. raw_tcp remote start(connect dst, start relay)

*** class raw_tcp

  local:
  read data -> send to ssl_relay
  write data
  remote:
  connect to real remote
  read/write as local

#+BEGIN_SRC dot :file class.svg :cmdline -Kdot -Tsvg
digraph tcp {
  rankdir=LR
  node[shape=box]
  edge[style=dashed]
  subgraph cluster_local {
    label="local"
    raw_tcp -> ssl_relay_tcp[ label="weak_ptr"]
    ssl_relay_tcp->raw_tcp[style=solid label="shared_ptr"]
    relay_server -> {raw_tcp } [ label="create" constraint=false]
    relay_server -> {ssl_relay_udp ssl_relay_tcp} [label="create\nweak_ptr" ]

    raw_udp -> ssl_relay_udp[ label="weak_ptr"]
    ssl_relay_udp->raw_udp[style=solid label="shared_ptr" constraint=false]
    ssl_relay_udp->raw_udp[label="create" constraint=false]
  }
  tcp_client -> relay_server[ label="connect\naccept"]
  tcp_client->raw_tcp[dir=both label="read/write"]
  udp_client -> relay_server[label="send"]
  udp_client->raw_udp[dir=back label="send" ]


  subgraph cluster_server {
    label="server"
      s_ssl_relay_tcp[label="ssl_relay_tcp"]
      s_raw_tcp[label="raw_tcp"]
      s_relay_server[label="relay_server"]
      s_ssl_relay_tcp -> s_raw_tcp[ label="create"]
      s_ssl_relay_tcp -> s_raw_tcp[style=solid label="shared_ptr"]
      s_raw_tcp -> s_ssl_relay_tcp[ label="weak_ptr"]
      s_relay_server->s_ssl_relay_tcp[ label="create\nweak_ptr" constraint=false]

      s_ssl_relay_udp->s_raw_udp[label="create"]
      s_ssl_relay_udp -> s_raw_udp[style=solid label="shared_ptr"]
      s_raw_udp -> s_ssl_relay_udp[ label="weak_ptr"]
      s_relay_server->s_ssl_relay_udp[ label="create\nweak_ptr" constraint=false]
  }
  ssl_relay_tcp->s_ssl_relay_tcp[dir=both label="read/write"]
  {ssl_relay_tcp ssl_relay_udp}->s_relay_server[ label="connect\naccept" constraint=false]

  ssl_relay_udp->s_ssl_relay_udp[dir=both label="read/write"]
  s_raw_tcp -> tcp_remote[ label="connect\naccept"]
  s_raw_udp -> udp_remote[ dir=both label="send"]

}
#+END_SRC


#+BEGIN_SRC dot :file tcp.svg :cmdline -Kdot -Tsvg
digraph tcp {
  rankdir=LR
  node[shape=box]
  edge[dir=both]
  subgraph cluster_local2 {
    label="local2"
    raw_tcp_2c[label="raw_tcp"]
    raw_tcp_2d[label="raw_tcp"]
    ssl_relay_2[label="ssl_relay"]
    raw_tcp_2c -> ssl_relay_2
    raw_tcp_2d -> ssl_relay_2

  }
  client_c -> raw_tcp_2c
  client_d -> raw_tcp_2d

  subgraph cluster_local1 {
    label="local1"
    raw_tcp_1a[label="raw_tcp"]
    raw_tcp_1b[label="raw_tcp"]
    ssl_relay_1[label="ssl_relay"]
    raw_tcp_1a -> ssl_relay_1
    raw_tcp_1b -> ssl_relay_1
  }
  client_a -> raw_tcp_1a
  client_b -> raw_tcp_1b

  subgraph cluster_server {
    label="server"
    subgraph relay1 {
      label=""
      s_ssl_relay_1[label="ssl_relay"]
      s_raw_tcp_1a[label="raw_tcp"]
      s_raw_tcp_1b[label="raw_tcp"]
      s_ssl_relay_1 -> s_raw_tcp_1a
      s_ssl_relay_1 -> s_raw_tcp_1b
    }
    subgraph relay2 {
      s_ssl_relay_2[label="ssl_relay"]
      s_raw_tcp_2c[label="raw_tcp"]
      s_raw_tcp_2d[label="raw_tcp"]
      s_ssl_relay_2 -> s_raw_tcp_2c
      s_ssl_relay_2 -> s_raw_tcp_2d
      }

  }
  ssl_relay_1->s_ssl_relay_1[ label="session1a\nsession1b"]
  ssl_relay_2->s_ssl_relay_2[ label="session2c\nsession2d"]

  s_raw_tcp_1a -> remote1a
  s_raw_tcp_1b -> remote1b
  s_raw_tcp_2c -> remote2c
  s_raw_tcp_2d -> remote2d

}
#+END_SRC

#+BEGIN_SRC dot :file udp.svg :cmdline -Kdot -Tsvg
digraph udp {
  rankdir=LR
  node[shape=box]
  edge[dir=both]

  subgraph cluster_local2 {
    label="local2"
    raw_udp2[label="raw_udp"]
    ssl_relay_2[label="ssl_relay"]
    raw_udp2 -> ssl_relay_2
  }
  {client_c client_d }-> raw_udp2

  subgraph cluster_local1 {
    label="local1"
    raw_udp1[label="raw_udp"]
    ssl_relay_1[label="ssl_relay"]
    raw_udp1 -> ssl_relay_1
  }
  {client_a client_b }-> raw_udp1
  subgraph cluster_server {
    label="server"
    s_ssl_relay_1[label="ssl_relay"]
    s_ssl_relay_2[label="ssl_relay"]
    s_raw_udp_1a[label="raw_udp"]
    s_raw_udp_1b[label="raw_udp"]
    s_raw_udp_2c[label="raw_udp"]
    s_raw_udp_2d[label="raw_udp"]
    s_ssl_relay_1 -> s_raw_udp_1a
    s_ssl_relay_1 -> s_raw_udp_1b
    s_ssl_relay_2 -> s_raw_udp_2c
    s_ssl_relay_2 -> s_raw_udp_2d
  }
  ssl_relay_1->s_ssl_relay_1[ label="session1a\nsession1b"]
  ssl_relay_2->s_ssl_relay_2[ label="session2c\nsession2d"]
  s_raw_udp_1a -> remote1a
  s_raw_udp_1b -> remote1b
  s_raw_udp_2c -> remote2c
  s_raw_udp_2d -> remote2d
}
#+END_SRC


## UDP

  class udp_server
  class raw_udp
  local
  1. recvmsg
  2. find session with dst/src, if found, goto 4
  3. new session, send start udp by ssl_relay
  4. send session data
  remote
  1. connect to remote
  2. start remote relay(recv -> send by ssl_relay)

send:
  found dst in _relays, bind src addr
  send data

  ssl_relay
    found relay in _relays, if not found, use default(raw_udp)
    local: read data, let raw_udp send data back
    remote: read data, found associate raw_udp send data

#+BEGIN_SRC dot :file udpstartrelay.svg :cmdline -Kdot -Tsvg
digraph udp {
#  rankdir=LR
  node[shape=box]
  subgraph cluster_send_data{
    label="send data"
    check_data_sess[label="session == data_sess" shape=diamond]
    check_data_sess-> send_raw[label="Y"]
    check_data_sess -> find_dst[label="N"]
    find_dst-> bind_dst -> send_raw-> next_data -> check_data_sess
  }
  subgraph cluster_start_relay {
    label="start relay"
    check_sess[label="session == 0" shape=diamond]
    find_sess[shape=diamond]
    send[label="send data"]
    recvmsg -> check_sess
    check_sess-> send [label="N"]
    check_sess-> find_sess [label="Y"]
    find_sess -> send [label="Y"]
    find_sess-> new_sess[label="N"]
    new_sess -> send_start -> send
    send -> recvmsg[constraint=false]
  }
}
#+END_SRC
